#pragma kernel GPUDrivenCulling

struct VegetationInstanceData {
	float3 center;
	float3 extents;
	float4x4 matrixData;
	int InstanceID;
	int ModelPrototypeID;
};
StructuredBuffer<VegetationInstanceData> instancesBuffer;

int instancesCount;

// plane use float4 to define, as  (A,B,C,D) , Ax + By + Cz + D = 0
float4 cameraPlanes[6];

// hiz
float3 cmrPos;
float3 cmrDir;
// float cmrHalfFov;
float4x4 matrix_VP;
Texture2D HZB_Depth;
int depthTextureSize;
// bool isOpenGL;

// like List in C#, use for storing the result of visible after frustum culling
// AppendStructuredBuffer<float4x4> visibleBuffer;
AppendStructuredBuffer<VegetationInstanceData> visibleBuffer;

bool showInstanceBounds;
struct GPUBounds
{
	float3 min;
	float3 max;
};
AppendStructuredBuffer<GPUBounds> GPUBoundsBuffer;

// frustum culling is to judge if the bbox of instance is intersected with frustum of camera
bool IsOutsidePlane(float4 plane, float3 pointPos)
{
	// plane is defined as Ax+By+Cz+D = 0, so dot + w > 0 means the point is outside the plane
	return dot(plane.xyz, pointPos) + plane.w > 0;
}

bool IsCulled(in float4 boundVerts[8])
{
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (!IsOutsidePlane(cameraPlanes[i], boundVerts[j].xyz)) break;
			// if there is a plane that 8 vertices are outside, means the box is outside the frustum
			if (j == 7) return true;
		}
	}
	return false;
}


inline float3 CalPointUVD(float4x4 VPMatrix, float3 pos)
{
	float4 clipSpace = mul(VPMatrix, float4(pos, 1));
	float3 ndc = clipSpace.xyz / clipSpace.w;
    
	#if SHADER_API_GLES3
		float3 uvd = (ndc + 1) * 0.5;
	#else
		float3 uvd;
		uvd.xy = (ndc.xy + 1) * 0.5;
		uvd.z = ndc.z;
	#endif
	#if defined(UNITY_REVERSED_Z)
		uvd.z = 1 - uvd.z;
	#endif
	return uvd;
}

// in general,only use 1D number to declare the dispatch and numthreads
//  SV_DispatchThreadID is the id in all the threads in dispatch
// here, the number of threads in a group is 64
// so, the number of group in a dispatch should be (instancesCount / 64, 1, 1)
[numthreads(64,1,1)]
void GPUDrivenCulling(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= (uint)instancesCount) return;

	// frustum culling
	VegetationInstanceData instance = instancesBuffer[id.x];

	float3 boundMin = instance.center - instance.extents;
	float3 boundMax = instance.center + instance.extents;

	float4 boundVerts[8];
	boundVerts[0] = mul(instance.matrixData, float4(boundMin.x, boundMin.y, boundMin.z, 1));
	boundVerts[1] = mul(instance.matrixData, float4(boundMin.x, boundMin.y, boundMax.z, 1));

	boundVerts[2] = mul(instance.matrixData, float4(boundMin.x, boundMax.y, boundMin.z, 1));
	boundVerts[3] = mul(instance.matrixData, float4(boundMin.x, boundMax.y, boundMax.z, 1));
	
	boundVerts[4] = mul(instance.matrixData, float4(boundMax.x, boundMin.y, boundMin.z, 1));
	boundVerts[5] = mul(instance.matrixData, float4(boundMax.x, boundMin.y, boundMax.z, 1));
	
	boundVerts[6] = mul(instance.matrixData, float4(boundMax.x, boundMax.y, boundMin.z, 1));
	boundVerts[7] = mul(instance.matrixData, float4(boundMax.x, boundMax.y, boundMax.z, 1));
	
	if(IsCulled(boundVerts))
		return;

	// hiz culling
	float3 itemPos = float3(instance.matrixData[0][3],instance.matrixData[1][3],instance.matrixData[2][3]);
	float4 uvdBoundVerts[8];
	float4 uvdPos=float4(CalPointUVD(matrix_VP,itemPos),1);
	for(int j = 0; j < 8; j++)
	{
		uvdBoundVerts[j]=float4(CalPointUVD(matrix_VP,boundVerts[j].xyz),1);
	}
	// if(clipPos.x<0||clipPos.x>1||clipPos.y<0||clipPos.y>1)return;
	
	float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;
	for (int i = 0; i < 8; i++)
	{
		if (minX > uvdBoundVerts[i].x) minX = uvdBoundVerts[i].x;
		if (minY > uvdBoundVerts[i].y) minY = uvdBoundVerts[i].y;
		if (minZ > uvdBoundVerts[i].z) minZ = uvdBoundVerts[i].z;
		if (maxX < uvdBoundVerts[i].x) maxX = uvdBoundVerts[i].x;
		if (maxY < uvdBoundVerts[i].y) maxY = uvdBoundVerts[i].y;
		if (maxZ < uvdBoundVerts[i].z) maxZ = uvdBoundVerts[i].z;
	}
	
	int mipLevel = clamp((int)log2(max(maxX - minX, maxY - minY) * depthTextureSize),0,8);
	uint texScale = 1 << mipLevel;
	uint2 uv = uint2( uvdPos.xy * (depthTextureSize / texScale));
	
	// float minD = HZB_Depth.mips[mipLevel][uv.xy].r;
	
	float minD =min(
		min(HZB_Depth.mips[mipLevel][uv.xy + uint2(0, 0)].r, HZB_Depth.mips[mipLevel][uv.xy + uint2(0, 1)].r),
		min(HZB_Depth.mips[mipLevel][uv.xy + uint2(1, 0)].r, HZB_Depth.mips[mipLevel][uv.xy + uint2(1, 1)].r)
	);
	if (minD > uvdPos.z + 1e-4)return;

	// finish culling
	visibleBuffer.Append(instance);

	if (showInstanceBounds)
	{
		GPUBounds gbox;
		float x = boundVerts[0].x; float xx = x;
		float y = boundVerts[0].y; float yy = y;
		float z = boundVerts[0].z; float zz = z;
			
		for (int i = 0; i < 8; i++)
		{
			x = min(x, boundVerts[i].x);
			y = min(y, boundVerts[i].y);
			z = min(z, boundVerts[i].z);
			xx = max(xx, boundVerts[i].x);
			yy = max(yy, boundVerts[i].y);
			zz = max(zz, boundVerts[i].z);
		}
		gbox.min = float3(x, y, z);
		gbox.max = float3(xx, yy, zz);
		//gbox.min = boundVerts[0];
		//gbox.max = boundVerts[7];
		GPUBoundsBuffer.Append(gbox);
	}
}