#pragma kernel FrustumCulling


StructuredBuffer<float4x4> instancesBuffer;
int instancesCount;
// plane use float4 to define, as  (A,B,C,D) , Ax + By + Cz + D = 0
float4 cameraPlanes[6];

float3 boxCenter;
float3 boxExtents;

// like List in C#, use for storing the result of visible after frustum culling
AppendStructuredBuffer<float4x4> visibleBuffer;

bool showInstanceBounds;
struct GPUBounds {
	float3 min;
	float3 max;
};
AppendStructuredBuffer<GPUBounds> GPUBoundsBuffer;



// frustum culling is to judge if the bbox of instance is intersected with frustum of camera
bool IsOutsidePlane(float4 plane, float3 pointPos) {
	// plane is defined as Ax+By+Cz+D = 0, so dot + w > 0 means the point is outside the plane
	return dot(plane.xyz, pointPos) + plane.w > 0;
}

bool IsCulled(in float4 boundVerts[8]) {
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 8; j++) {
			if (!IsOutsidePlane(cameraPlanes[i], boundVerts[j].xyz)) break;
			// if there is a plane that 8 vertices are outside, means the box is outside the frustum
			if (j == 7) return true;
		}
	}
	return false;
}


// in general,only use 1D number to declare the dispatch and numthreads
//  SV_DispatchThreadID is the id in all the threads in dispatch
// here, the number of threads in a group is 64
// so, the number of group in a dispatch should be (instancesCount / 64, 1, 1)
[numthreads(64,1,1)]
void FrustumCulling(uint3 id : SV_DispatchThreadID) {
	if (id.x >= (uint)instancesCount) return;
	float4x4 instance = instancesBuffer[id.x];

	float3 boundMin = boxCenter - boxExtents;
	float3 boundMax = boxCenter + boxExtents;

	float4 boundVerts[8];
	boundVerts[0] = mul(instance, float4(boundMin.x, boundMin.y, boundMin.z, 1));
	boundVerts[1] = mul(instance, float4(boundMin.x, boundMin.y, boundMax.z, 1));

	boundVerts[2] = mul(instance, float4(boundMin.x, boundMax.y, boundMin.z, 1));
	boundVerts[3] = mul(instance, float4(boundMin.x, boundMax.y, boundMax.z, 1));
	
	boundVerts[4] = mul(instance, float4(boundMax.x, boundMin.y, boundMin.z, 1));
	boundVerts[5] = mul(instance, float4(boundMax.x, boundMin.y, boundMax.z, 1));
	
	boundVerts[6] = mul(instance, float4(boundMax.x, boundMax.y, boundMin.z, 1));
	boundVerts[7] = mul(instance, float4(boundMax.x, boundMax.y, boundMax.z, 1));

	if (!IsCulled(boundVerts)) {
		visibleBuffer.Append(instance);

		if (showInstanceBounds) {
			GPUBounds gbox;
			float x = boundVerts[0].x; float xx = x;
			float y = boundVerts[0].y; float yy = y;
			float z = boundVerts[0].z; float zz = z;
				
			for (int i = 0; i < 8; i++) {
				x = min(x, boundVerts[i].x);
				y = min(y, boundVerts[i].y);
				z = min(z, boundVerts[i].z);
				xx = max(xx, boundVerts[i].x);
				yy = max(yy, boundVerts[i].y);
				zz = max(zz, boundVerts[i].z);
			}
			gbox.min = float3(x, y, z);
			gbox.max = float3(xx, yy, zz);
			//gbox.min = boundVerts[0];
			//gbox.max = boundVerts[7];
			GPUBoundsBuffer.Append(gbox);
		}
	}

}