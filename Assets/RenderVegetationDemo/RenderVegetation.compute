#pragma kernel FrustumCulling


StructuredBuffer<float4x4> instancesBuffer;
int instancesCount;
// plane use float4 to define, as  (A,B,C,D) , Ax + By + Cz + D = 0
float4 cameraPlanes[6];
float4x4 cameraVPMatrix;

float3 boxCenter;
float3 boxExtents;

float3 cameraForward;

// like List in C#, use for storing the result of visible after frustum culling
AppendStructuredBuffer<float4x4> visibleBuffer;


// hiz texture
Texture2D depthMipmapTex;
sampler2D DepthTextureDebug;
uint depthTextureSize;
bool isOpenGL;


bool showInstanceBounds;
struct GPUBounds {
	float3 min;
	float3 max;
};
AppendStructuredBuffer<GPUBounds> GPUBoundsBuffer;



// frustum culling is to judge if the bbox of instance is intersected with frustum of camera
bool IsOutsidePlane(float4 plane, float3 pointPos) {
	// plane is defined as Ax+By+Cz+D = 0, so dot + w > 0 means the point is outside the plane
	return dot(plane.xyz, pointPos) + plane.w > 0;
}

bool IsFrustumCulled(in float4 boundVerts[8]) {
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 8; j++) {
			if (!IsOutsidePlane(cameraPlanes[i], boundVerts[j].xyz)) break;
			// if there is a plane that 8 vertices are outside, means the box is outside the frustum
			if (j == 7) return true;
		}
	}
	return false;
}

bool IsHiZCulled(in float4 boundVerts[8]) {
	
	// ndc space's new bbox
	float minx = 1; float maxx = -1;
	float miny = 1; float maxy = -1;
	float minz = 1; float maxz = -1;

	for (int i = 0; i < 8; i++) {
		// verts in ndc space
		float4 clipPos = mul(cameraVPMatrix, boundVerts[i]);
		float3 ndcPos = clipPos.xyz / clipPos.w;

		minx = min(minx, ndcPos.x); maxx = max(maxx, ndcPos.x);
		miny = min(miny, ndcPos.y); maxy = max(maxy, ndcPos.y);
		minz = min(minz, ndcPos.z); maxz = max(maxz, ndcPos.z);
	}

	// transform the ndc [x,y]<->[-1,1] to [u,v]<->[0,1]
	float2 uvLeftBottom = float2(minx, miny) * 0.5f + 0.5f;
	float2 uvUpRight = float2(maxx, maxy) * 0.5f + 0.5f;
	// we rather let it go, than cull it wrongly
	// if the platform is DX11, the z would be reverse to [0,1], so we take the maxz, means close to camera
	float depthObj = maxz;

	// if the platform is OpenGL, the z would be in [-1,1],so we need to transfer it to [0,1]
	// and take the minz
	if (isOpenGL) {
		depthObj = minz;
		depthObj = depthObj * 0.5f + 0.5f;
	}

	// mipmap level
	// ndc [x,y]<->[-1,1] to screen [0,width]x[0,height], actually is (uvLB-uvUP) * curDepthTexSize
	uint scwidth = max(maxx - minx, maxy - miny) * 0.5f * depthTextureSize;
	// this is because when we generate the mipmap, the last level's size is > 8,so minus 4
	uint mmlevel = (uint)clamp(log2(scwidth)-1, 0, log2(depthTextureSize)-4);
	uint curDepthTexSize = depthTextureSize / (1 << mmlevel);

	float depthInMM[4];
	depthInMM[0] = tex2Dlod(DepthTextureDebug, float4(uvLeftBottom.x, uvLeftBottom.y, 0, mmlevel)).r;
	depthInMM[1] = tex2Dlod(DepthTextureDebug, float4(uvLeftBottom.x, uvUpRight.y, 0, mmlevel)).r;
	depthInMM[2] = tex2Dlod(DepthTextureDebug, float4(uvUpRight.x, uvLeftBottom.y, 0, mmlevel)).r;
	depthInMM[3] = tex2Dlod(DepthTextureDebug, float4(uvUpRight.x, uvUpRight.y, 0, mmlevel)).r;
	
	float depthInMMMin = depthInMM[0];
	for (uint i = 0; i < 4; i++) depthInMMMin = min(depthInMMMin, depthInMM[i]);

	if (depthObj < depthInMMMin)
		return true;
	
	return false;

}

// in general,only use 1D number to declare the dispatch and numthreads
//  SV_DispatchThreadID is the id in all the threads in dispatch
// here, the number of threads in a group is 64
// so, the number of group in a dispatch should be (instancesCount / 64, 1, 1)
[numthreads(64,1,1)]
void FrustumCulling(uint3 id : SV_DispatchThreadID) {
	if (id.x >= (uint)instancesCount) return;
	float4x4 instance = instancesBuffer[id.x];

	float3 boundMin = boxCenter - boxExtents;
	float3 boundMax = boxCenter + boxExtents;

	// verts in world space
	float4 boundVerts[8];
	boundVerts[0] = mul(instance, float4(boundMin.x, boundMin.y, boundMin.z, 1));
	boundVerts[1] = mul(instance, float4(boundMin.x, boundMin.y, boundMax.z, 1));

	boundVerts[2] = mul(instance, float4(boundMin.x, boundMax.y, boundMin.z, 1));
	boundVerts[3] = mul(instance, float4(boundMin.x, boundMax.y, boundMax.z, 1));
	
	boundVerts[4] = mul(instance, float4(boundMax.x, boundMin.y, boundMin.z, 1));
	boundVerts[5] = mul(instance, float4(boundMax.x, boundMin.y, boundMax.z, 1));
	
	boundVerts[6] = mul(instance, float4(boundMax.x, boundMax.y, boundMin.z, 1));
	boundVerts[7] = mul(instance, float4(boundMax.x, boundMax.y, boundMax.z, 1));

	if (!IsFrustumCulled(boundVerts) && !IsHiZCulled(boundVerts)) {
		visibleBuffer.Append(instance);

		if (showInstanceBounds) {
			GPUBounds gbox;
			float x = boundVerts[0].x; float xx = x;
			float y = boundVerts[0].y; float yy = y;
			float z = boundVerts[0].z; float zz = z;
				
			for (int i = 0; i < 8; i++) {
				x = min(x, boundVerts[i].x);
				y = min(y, boundVerts[i].y);
				z = min(z, boundVerts[i].z);
				xx = max(xx, boundVerts[i].x);
				yy = max(yy, boundVerts[i].y);
				zz = max(zz, boundVerts[i].z);
			}
			gbox.min = float3(x, y, z);
			gbox.max = float3(xx, yy, zz);
			//gbox.min = boundVerts[0];
			//gbox.max = boundVerts[7];
			GPUBoundsBuffer.Append(gbox);
		}
	}

}